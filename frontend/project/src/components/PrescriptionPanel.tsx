import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Copy, Download, RotateCcw, CheckCircle, FileText, Share, Loader2 } from 'lucide-react';

interface PrescriptionPanelProps {
  prescription: any;
  isProcessing: boolean;
  onRetry: () => void;
}

const PrescriptionPanel: React.FC<PrescriptionPanelProps> = ({
  prescription,
  isProcessing,
  onRetry
}) => {
  const [copied, setCopied] = useState(false);

  const formatPrescription = (data: any) => {
    if (!data) return '';
    
    let formatted = '';
    
    // Add header
    formatted += `# Medical Assessment & Prescription\n\n`;
    formatted += `**Date:** ${new Date().toLocaleDateString()}\n`;
    formatted += `**Generated by:** Clinqo AI Assistant\n\n`;
    
    // Add possible diagnoses
    if (data.possible_diagnoses && data.possible_diagnoses.length > 0) {
      formatted += `## Possible Diagnoses\n\n`;
      data.possible_diagnoses.forEach((diagnosis: any, index: number) => {
        formatted += `${index + 1}. **${diagnosis.condition}**\n`;
        if (diagnosis.confidence) {
          formatted += `   - Confidence: ${Math.round(diagnosis.confidence * 100)}%\n`;
        }
        if (diagnosis.description) {
          formatted += `   - ${diagnosis.description}\n`;
        }
        formatted += '\n';
      });
    }
    
    // Add medications
    if (data.medications && data.medications.length > 0) {
      formatted += `## Recommended Medications\n\n`;
      data.medications.forEach((med: any, index: number) => {
        formatted += `${index + 1}. **${med.name}**\n`;
        if (med.dosage) formatted += `   - Dosage: ${med.dosage}\n`;
        if (med.frequency) formatted += `   - Frequency: ${med.frequency}\n`;
        if (med.duration) formatted += `   - Duration: ${med.duration}\n`;
        if (med.instructions) formatted += `   - Instructions: ${med.instructions}\n`;
        formatted += '\n';
      });
    }
    
    // Add recommended tests
    if (data.recommended_tests && data.recommended_tests.length > 0) {
      formatted += `## Recommended Tests\n\n`;
      data.recommended_tests.forEach((test: string, index: number) => {
        formatted += `${index + 1}. ${test}\n`;
      });
      formatted += '\n';
    }
    
    // Add lifestyle recommendations
    if (data.lifestyle_recommendations && data.lifestyle_recommendations.length > 0) {
      formatted += `## Lifestyle Recommendations\n\n`;
      data.lifestyle_recommendations.forEach((rec: string, index: number) => {
        formatted += `${index + 1}. ${rec}\n`;
      });
      formatted += '\n';
    }
    
    // Add urgent flags
    if (data.urgent_flags && data.urgent_flags.length > 0) {
      formatted += `## ⚠️ Urgent Flags\n\n`;
      data.urgent_flags.forEach((flag: string, index: number) => {
        formatted += `${index + 1}. ${flag}\n`;
      });
      formatted += '\n';
    }
    
    // Add disclaimer
    if (data.disclaimer) {
      formatted += `## Medical Disclaimer\n\n`;
      formatted += `${data.disclaimer}\n`;
    } else {
      formatted += `## Medical Disclaimer\n\n`;
      formatted += `This AI-generated assessment is for informational purposes only and should not replace professional medical advice. Please consult with a healthcare provider for proper diagnosis and treatment.\n`;
    }
    
    return formatted;
  };

  const handleCopy = async () => {
    try {
      const formattedText = formatPrescription(prescription);
      await navigator.clipboard.writeText(formattedText);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const handleDownload = () => {
    const formattedText = formatPrescription(prescription);
    const blob = new Blob([formattedText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `clinqo-prescription-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div
      initial={{ x: 50, opacity: 0 }}
      animate={{ x: 0, opacity: 1 }}
      transition={{ delay: 0.5 }}
      className="bg-white/60 dark:bg-slate-800/70 backdrop-blur-sm border border-white/20 dark:border-slate-700/50 rounded-2xl overflow-hidden shadow-lg"
    >
      {/* Header */}
      <div className="border-b border-white/20 dark:border-slate-700/50 p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="bg-gradient-to-r from-emerald-500 to-teal-500 p-2 rounded-lg">
              <FileText className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-slate-900 dark:text-white">AI Prescription</h3>
              <p className="text-sm text-slate-600 dark:text-slate-300">Generated medical recommendation</p>
            </div>
          </div>
          
          {!isProcessing && prescription && (
            <div className="flex items-center gap-2">
              <button
                onClick={handleCopy}
                className="flex items-center gap-2 bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 text-slate-700 dark:text-slate-300 px-3 py-2 rounded-lg transition-colors duration-200"
              >
                {copied ? (
                  <>
                    <CheckCircle className="w-4 h-4 text-green-600" />
                    <span className="text-sm">Copied!</span>
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4" />
                    <span className="text-sm">Copy</span>
                  </>
                )}
              </button>
              
              <button
                onClick={handleDownload}
                className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white px-3 py-2 rounded-lg transition-colors duration-200"
              >
                <Download className="w-4 h-4" />
                <span className="text-sm">Download</span>
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        {isProcessing ? (
          <div className="space-y-4">
            <div className="flex items-center gap-3 mb-6">
              <Loader2 className="w-6 h-6 animate-spin text-blue-500" />
              <span className="text-slate-600 dark:text-slate-300">Analyzing symptoms and generating prescription...</span>
            </div>
            
            <div className="animate-pulse space-y-3">
              {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (
                <div key={i} className="flex space-x-4">
                  <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded w-16"></div>
                  <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded flex-1"></div>
                </div>
              ))}
            </div>
          </div>
        ) : prescription ? (
          <div className="space-y-6">
            {/* Prescription Content */}
            <div className="bg-slate-50/80 dark:bg-slate-900/60 border border-slate-200/50 dark:border-slate-700/50 rounded-xl p-6 max-h-96 overflow-y-auto">
              <pre className="whitespace-pre-wrap text-sm text-slate-800 dark:text-slate-200 font-mono leading-relaxed">
                {formatPrescription(prescription)}
              </pre>
            </div>

            {/* Action Buttons */}
            <div className="flex items-center justify-between pt-4 border-t border-white/20 dark:border-slate-700/50">
              <button
                onClick={onRetry}
                className="flex items-center gap-2 text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white px-4 py-2 rounded-lg hover:bg-slate-100/50 dark:hover:bg-slate-700/50 transition-all duration-200"
              >
                <RotateCcw className="w-4 h-4" />
                Try Again
              </button>
              
              <div className="flex gap-3">
                <button className="flex items-center gap-2 bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 text-slate-700 dark:text-slate-300 px-4 py-2 rounded-lg transition-colors duration-200">
                  <Share className="w-4 h-4" />
                  Share
                </button>
                
                <button className="bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700 text-white px-6 py-2 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg">
                  Save to Records
                </button>
              </div>
            </div>
          </div>
        ) : (
          <div className="text-center py-12 text-slate-500 dark:text-slate-400">
            <FileText className="w-12 h-12 mx-auto mb-4 opacity-50" />
            <p>Prescription will appear here after processing</p>
          </div>
        )}
      </div>
    </motion.div>
  );
};

export default PrescriptionPanel;